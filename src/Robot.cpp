// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<DrivingSystem> Robot::drivingSystem;
std::shared_ptr<HangingSystem> Robot::hangingSystem;
std::shared_ptr<IntakeSystem> Robot::intakeSystem;
std::shared_ptr<PneumaticsSystem> Robot::pneumaticsSystem;
std::shared_ptr<AutonomousSystem> Robot::autonomousSystem;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    drivingSystem.reset(new DrivingSystem());
    hangingSystem.reset(new HangingSystem());
    intakeSystem.reset(new IntakeSystem());
    pneumaticsSystem.reset(new PneumaticsSystem());
    autonomousSystem.reset(new AutonomousSystem());



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// Add commands to Autonomous Sendable Chooser
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


	chooser.AddObject("right position Scale", new AutonomousCommand());
	chooser.AddDefault("left position Scale", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	frc::SmartDashboard::PutData("Auto Modes", &chooser);

	CameraServer::GetInstance()->StartAutomaticCapture("Camera #1", 0);
	Robot::pneumaticsSystem->InitSolenoid(0);
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
	Robot::pneumaticsSystem->InitSolenoid(0);
}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	Robot::pneumaticsSystem->InitSolenoid(0);
	autonomousCommand = chooser.GetSelected();

	if (autonomousCommand != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
//	if(DriverStation::GetMatchTime()<=0){
//		autonomousCommand->Cancel();
//	}else{
		frc::Scheduler::GetInstance()->Run();
//	}

}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
	{
		autonomousCommand->Cancel();
	}
	Robot::pneumaticsSystem->InitSolenoid(0);
}

void Robot::TeleopPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

START_ROBOT_CLASS(Robot);

