// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/CompressorOffCommand.h"
#include "Commands/CompressorOnCommand.h"
#include "Commands/DrivingCommand.h"
#include "Commands/HangingCommand.h"
#include "Commands/IntakeCommand.h"
#include "Commands/IntakeInCommand.h"
#include "Commands/IntakeOutCommand.h"
#include "Commands/SolenoidCommand1.h"
#include "Commands/SolenoidCommand2.h"
#include "Commands/SolenoidCommand3.h"
#include "Commands/SolenoidCommand4.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
	//°´Å¥ÉùÃ÷
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	Joystick1.reset(new frc::Joystick(0));
	Joystick2.reset(new frc::Joystick(1));
	// solenoid 1 -- intake open/close    -- 12 of drive
	// solenoid 2 -- driving system speed  --button 7 slow of drive
	// solenoid 3 -- lift speed  -- button 5 of lift
	// solenoid 4 -- fly with dalao mode  -- button 12 of lift

	//for solenoid command : 12 11 10 9 1

//---------solenoid button define------------//
	// intake open/close button define
	joystickButton1.reset(new frc::JoystickButton(Joystick1.get(), 12));
	joystickButton1->WhenPressed(new SolenoidCommand1());
//	joystickButton9.reset(new frc::JoystickButton(Joystick1.get(), 12));
//	joystickButton9->WhenPressed(new SolenoidCommand1());

	//driving speed mode switch
	joystickButton11.reset(new frc::JoystickButton(Joystick1.get(), 7));
	joystickButton11->WhenPressed(new SolenoidCommand2());
	joystickButton100.reset(new frc::JoystickButton(Joystick1.get(), 8));
	joystickButton100->WhenPressed(new SolenoidCommand2());


	//lift speed mode switch
	joystickButton10.reset(new frc::JoystickButton(Joystick2.get(), 5));
	joystickButton10->WhenPressed(new SolenoidCommand3());

	//fly with dalao ONNNNNN
	joystickButton12.reset(new frc::JoystickButton(Joystick2.get(), 12));
	joystickButton12->WhenPressed(new SolenoidCommand4());

//	joystickButtonLiftslow.reset(new frc::JoystickButton(Joystick2.get(), 7));
//	joystickButtonLiftslow->WhenPressed(new SolenoidCommand3());
//	joystickButtonLiftfast.reset(new frc::JoystickButton(Joystick2.get(), 8));
//	joystickButtonLiftfast->WhenPressed(new SolenoidCommand3());

//-------end solenoid button define end --------//

    joystickButton8.reset(new frc::JoystickButton(Joystick2.get(), 9));
    joystickButton8->WhenPressed(new CompressorOffCommand());
    joystickButton7.reset(new frc::JoystickButton(Joystick2.get(), 10));
    joystickButton7->WhenPressed(new CompressorOnCommand());
    joystickButton6.reset(new frc::JoystickButton(Joystick2.get(), 7));
    joystickButton6->WhenPressed(new IntakeCommand());
    joystickButton5.reset(new frc::JoystickButton(Joystick2.get(), 8));
    joystickButton5->WhenPressed(new IntakeCommand());
    joystickButton4.reset(new frc::JoystickButton(Joystick1.get(), 2));
    joystickButton4->WhenPressed(new IntakeInCommand());
    joystickButton3.reset(new frc::JoystickButton(Joystick1.get(), 1));
    joystickButton3->WhenPressed(new IntakeOutCommand());

//    joystickButtonTESTMODE.reset(new frc::JoystickButton(Joystick1.get(), 5);




    // SmartDashboard Buttons
    frc::SmartDashboard::PutData("SolenoidCommand4", new SolenoidCommand4());
    frc::SmartDashboard::PutData("SolenoidCommand3", new SolenoidCommand3());
    frc::SmartDashboard::PutData("SolenoidCommand2", new SolenoidCommand2());
    frc::SmartDashboard::PutData("SolenoidCommand1", new SolenoidCommand1());
    frc::SmartDashboard::PutData("CompressorOffCommand", new CompressorOffCommand());
    frc::SmartDashboard::PutData("CompressorOnCommand", new CompressorOnCommand());
    frc::SmartDashboard::PutData("DrivingCommand", new DrivingCommand());
    frc::SmartDashboard::PutData("HangingCommand", new HangingCommand());
    frc::SmartDashboard::PutData("IntakeOutCommand", new IntakeOutCommand());
    frc::SmartDashboard::PutData("IntakeInCommand", new IntakeInCommand());
    frc::SmartDashboard::PutData("IntakeCommand", new IntakeCommand());
    frc::SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());





    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS


std::shared_ptr<frc::Joystick> OI::getJoystick1() {
   return Joystick1;
}
std::shared_ptr<frc::Joystick> OI::getJoystick2() {
   return Joystick2;
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
