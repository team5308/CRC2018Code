// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "ctre/Phoenix.h"
#include "Robot.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<WPI_TalonSRX> RobotMap::drivingSystemTalonSRX1;
std::shared_ptr<WPI_VictorSPX> RobotMap::drivingSystemVictorSPX1;
std::shared_ptr<WPI_VictorSPX> RobotMap::drivingSystemVictorSPX2;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::drivingSystemSpeedControllerGroup1;
std::shared_ptr<WPI_TalonSRX> RobotMap::drivingSystemTalonSRX2;
std::shared_ptr<WPI_VictorSPX> RobotMap::drivingSystemVictorSPX3;
std::shared_ptr<WPI_VictorSPX> RobotMap::drivingSystemVictorSPX4;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::drivingSystemSpeedControllerGroup2;
std::shared_ptr<frc::RobotDrive> RobotMap::drivingSystemRobotDrive21;
std::shared_ptr<frc::Encoder> RobotMap::hangingSystemQuadratureEncoder1;
std::shared_ptr<WPI_TalonSRX> RobotMap::hangingSystemTalonSRX1;
std::shared_ptr<frc::PIDController> RobotMap::hangingSystemPIDController1;
std::shared_ptr<frc::SpeedController> RobotMap::hangingSystemSpark1;
std::shared_ptr<WPI_VictorSPX> RobotMap::hangingSystemVictorSPX1;
std::shared_ptr<WPI_VictorSPX> RobotMap::hangingSystemVictorSPX2;
std::shared_ptr<frc::Encoder> RobotMap::intakeSystemQuadratureEncoder1;
std::shared_ptr<frc::SpeedController> RobotMap::intakeSystemSpark2;
std::shared_ptr<frc::PIDController> RobotMap::intakeSystemPIDController2;
std::shared_ptr<frc::SpeedController> RobotMap::intakeSystemVictorSP1;
std::shared_ptr<frc::SpeedController> RobotMap::intakeSystemVictorSP2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    drivingSystemTalonSRX1.reset(new WPI_TalonSRX(0));
    
    
    drivingSystemVictorSPX1.reset(new WPI_VictorSPX(1));
    
    
    drivingSystemVictorSPX2.reset(new WPI_VictorSPX(2));
    
    
    drivingSystemSpeedControllerGroup1 = std::make_shared<frc::SpeedControllerGroup>(*drivingSystemTalonSRX1, *drivingSystemVictorSPX1 , *drivingSystemVictorSPX2 );
    lw->AddActuator("DrivingSystem", "Speed Controller Group 1", drivingSystemSpeedControllerGroup1);
    
    drivingSystemTalonSRX2.reset(new WPI_TalonSRX(3));
    
    
    drivingSystemVictorSPX3.reset(new WPI_VictorSPX(4));
    
    
    drivingSystemVictorSPX4.reset(new WPI_VictorSPX(5));
    
    
    drivingSystemSpeedControllerGroup2 = std::make_shared<frc::SpeedControllerGroup>(*drivingSystemTalonSRX2, *drivingSystemVictorSPX3 , *drivingSystemVictorSPX4 );
    lw->AddActuator("DrivingSystem", "Speed Controller Group 2", drivingSystemSpeedControllerGroup2);
    
    drivingSystemRobotDrive21.reset(new frc::RobotDrive(drivingSystemSpeedControllerGroup1, drivingSystemSpeedControllerGroup2));
    
    drivingSystemRobotDrive21->SetSafetyEnabled(true);
        drivingSystemRobotDrive21->SetExpiration(0.1);
        drivingSystemRobotDrive21->SetSensitivity(0.5);
        drivingSystemRobotDrive21->SetMaxOutput(1.0);

    hangingSystemQuadratureEncoder1.reset(new frc::Encoder(0, 1, false, frc::Encoder::k4X));
    lw->AddSensor("HangingSystem", "Quadrature Encoder 1", hangingSystemQuadratureEncoder1);
    hangingSystemQuadratureEncoder1->SetDistancePerPulse(1.0);
    hangingSystemQuadratureEncoder1->SetPIDSourceType(frc::PIDSourceType::kRate);
    hangingSystemTalonSRX1.reset(new WPI_TalonSRX(6));
    
    
    hangingSystemPIDController1.reset(new frc::PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ hangingSystemQuadratureEncoder1.get(), hangingSystemTalonSRX1.get(), 0.02));
    lw->AddActuator("HangingSystem", "PID Controller 1", hangingSystemPIDController1);
    hangingSystemPIDController1->SetContinuous(false); hangingSystemPIDController1->SetAbsoluteTolerance(0.2); 
    hangingSystemPIDController1->SetOutputRange(-1.0, 1.0);
    hangingSystemSpark1.reset(new frc::Spark(0));
    lw->AddActuator("HangingSystem", "Spark1", std::static_pointer_cast<frc::Spark>(hangingSystemSpark1));
    
    hangingSystemVictorSPX1.reset(new WPI_VictorSPX(7));
    
    
    hangingSystemVictorSPX2.reset(new WPI_VictorSPX(8));
    
    
    intakeSystemQuadratureEncoder1.reset(new frc::Encoder(2, 3, false, frc::Encoder::k4X));
    lw->AddSensor("IntakeSystem", "Quadrature Encoder 1", intakeSystemQuadratureEncoder1);
    intakeSystemQuadratureEncoder1->SetDistancePerPulse(1.0);
    intakeSystemQuadratureEncoder1->SetPIDSourceType(frc::PIDSourceType::kRate);
    intakeSystemSpark2.reset(new frc::Spark(1));
    lw->AddActuator("IntakeSystem", "Spark2", std::static_pointer_cast<frc::Spark>(intakeSystemSpark2));
    
    intakeSystemPIDController2.reset(new frc::PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ intakeSystemQuadratureEncoder1.get(), intakeSystemSpark2.get(), 0.02));
    lw->AddActuator("IntakeSystem", "PID Controller 2", intakeSystemPIDController2);
    intakeSystemPIDController2->SetContinuous(false); intakeSystemPIDController2->SetAbsoluteTolerance(0.2); 
    intakeSystemPIDController2->SetOutputRange(-1.0, 1.0);
    intakeSystemVictorSP1.reset(new frc::VictorSP(2));
    lw->AddActuator("IntakeSystem", "VictorSP1", std::static_pointer_cast<frc::VictorSP>(intakeSystemVictorSP1));
    
    intakeSystemVictorSP2.reset(new frc::VictorSP(3));
    lw->AddActuator("IntakeSystem", "VictorSP2", std::static_pointer_cast<frc::VictorSP>(intakeSystemVictorSP2));
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
