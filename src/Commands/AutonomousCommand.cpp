                            // RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutonomousCommand.h"
#include <iostream>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutonomousCommand::AutonomousCommand(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time

//���Զ������аѻ������������Ž��е������ǲ���1 2�������������
void AutonomousCommand::Initialize() {
}

// Called repeatedly when this Command is scheduled to run
void AutonomousCommand::Execute() {
	//���ػ�ȡ
//	std::string GameData;
//
//	GameData = "LLL";
//
//	//	GameUse
//	GameData = frc::DriverStation::GetInstance().GetGameSpecificMessage();
//
////	TestUse
//
////	Robot::autonomousSystem->testLiftAuto();
////	Robot::autonomousSystem->setTurn(90);
////	Robot::autonomousSystem->setRunDfsMode(200, true);
//	bool testmode = false;
//	 testmode = true;
//	if(testmode)
//	 Robot::autonomousSystem->setRunDfsMode(500, true);
//
//	if(GameData[1] == 'R')
//	{
//		Robot::autonomousSystem->AutoTestRightScaleGFromRightPosition();
//		printf("Right Scale \n");
//	}
//	else
//	{
//		Robot::autonomousSystem->setRunDfsMode(750,false);
//
//
//		printf("LEFT CROSS LINE TEST\n");
//	}

//switch autonomous

//
//	if(GameData[0] == 'R')
//	{
//		Robot::autonomousSystem->switchRight();
//	}
//	else
//	{
//		Robot::autonomousSystem->switchLeft();
//	}

//switch autonomous 2 case

//	if(GameData[0] == 'R')
//	{
//		Robot::autonomousSystem->switch2caseRight();
//	}
//	else
//	{
//		Robot::autonomousSystem->switch2caseLeft();
//	}
	 Robot::autonomousSystem->setRunDfsMode(100, true);
}

// Make this return true when this Command no longer needs to run execute()
bool AutonomousCommand::IsFinished() {
    return true;
}

// Called once after isFinished returns true
void AutonomousCommand::End() {
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousCommand::Interrupted() {

}


