// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "PneumaticsSystem.h"
#include "../RobotMap.h"
#include "../Robot.h"
#include "../OI.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS


PneumaticsSystem::PneumaticsSystem() : frc::Subsystem("PneumaticsSystem") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    compressor = RobotMap::pneumaticsSystemCompressor;
    solenoid1 = RobotMap::pneumaticsSystemSolenoid1;
    solenoid2 = RobotMap::pneumaticsSystemSolenoid2;
    solenoid3 = RobotMap::pneumaticsSystemSolenoid3;
    solenoid4 = RobotMap::pneumaticsSystemSolenoid4;

//	Robot::pneumaticsSystem->InitSolenoid(0);
    PneumaticsSystem::InitSolenoid(0);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //define temporary OI Class
    //OI temp;
}

void PneumaticsSystem::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILD	ER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void PneumaticsSystem::Periodic() {
    // Put code here to be run every loop

}


void PneumaticsSystem::compOn() {
    	PneumaticsSystem::compressor->Start();
 }

void PneumaticsSystem::compOff() {
	PneumaticsSystem::compressor->Stop();
    }

// solenoid 1 -- intake open/close    -- 12 of drive
// solenoid 2 -- driving system speed  --button 7 slow of drive
// solenoid 3 -- lift speed  -- button 5 of lift
// solenoid 4 -- fly with dalao mode  -- button 12 of lift

void PneumaticsSystem::Solenoid1(){
	PneumaticsSystem::changeSituation(1,Rico1?false:true);
}

void PneumaticsSystem::Solenoid2(){
//	PneumaticsSystem::changeSituation(2,Rico2?false:true);
	 //fast
	frc::Joystick Joystick1(0);
	if(Joystick1.GetRawButton(8))
	{
		PneumaticsSystem::changeSituation(2,true); //fast
	}
	else if(Joystick1.GetRawButton(7))
	{
		PneumaticsSystem::changeSituation(2,false); //slow
	}
}

void PneumaticsSystem::Solenoid3(){
	PneumaticsSystem::changeSituation(3,Rico3?false:true);
//	frc::Joystick Joystick2(0);
//		if(Joystick2.GetRawButton(7))
//		{
//			PneumaticsSystem::changeSituation(3,true); //fast
//		}
//		else if(Joystick2.GetRawButton(8))
//		{
//			PneumaticsSystem::changeSituation(3,false); //slow
//		}
}

void PneumaticsSystem::Solenoid4(){
	PneumaticsSystem::changeSituation(4,Rico4?false:true);
}
// Put methods for controlling this subsystem
// here. Call these from Commands.

bool PneumaticsSystem::changeSituation(int channel, bool sit = out) {
	// default situation out
	switch(channel)
	{
	case 1:
		PneumaticsSystem::solenoid1->Set(sit);
		Rico1 = sit;
		break;

	case 2:
		if(sit == out)
		{
			PneumaticsSystem::solenoid2->Set(DoubleSolenoid::kForward);
			Rico2 = out;
		}
		else if(sit == in)
		{
			PneumaticsSystem::solenoid2->Set(DoubleSolenoid::kReverse);
			Rico2 = in;
		}
		break;

	case 3:
		PneumaticsSystem::solenoid3->Set(sit);
		Rico3 = sit;
		break;

	case 4:
		PneumaticsSystem::solenoid4->Set(sit);
		Rico4 = sit;
		break;

	default:
		//TMD出了问题谁来负责？？
		break;
	}

	printf("Solenoid channel %d has changed to %s\n", channel, sit?"true":"false");
	return sit;
}

void PneumaticsSystem::InitSolenoid(int channel)
{
	switch(channel)
	{
		case 1:
			PneumaticsSystem::changeSituation(1, in);
			break;
		case 2:
			PneumaticsSystem::changeSituation(2, in); //out -> slow
			break;
		case 3:
			PneumaticsSystem::changeSituation(3, in); //isNotOut  ->  fast
			break;
		case 4:
			PneumaticsSystem::changeSituation(4, in);
			break;
		case 0:
			PneumaticsSystem::changeSituation(1, in);
			PneumaticsSystem::changeSituation(2, in);
			PneumaticsSystem::changeSituation(3, out);
			PneumaticsSystem::changeSituation(4, in);
			break;
		case 5:
			PneumaticsSystem::changeSituation(1, in);
			PneumaticsSystem::changeSituation(2, in);
			PneumaticsSystem::changeSituation(3, in);
			PneumaticsSystem::changeSituation(4, in);
			break;
		case 6:
			PneumaticsSystem::changeSituation(1, in);
			PneumaticsSystem::changeSituation(2, in);
			PneumaticsSystem::changeSituation(3, in);
			PneumaticsSystem::changeSituation(4, in);
	}

	printf("Solenoid %d ini completed\n", channel);

}


