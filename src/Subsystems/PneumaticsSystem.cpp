// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "PneumaticsSystem.h"
#include "../RobotMap.h"
#include "../Robot.h"
#include "../OI.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS


PneumaticsSystem::PneumaticsSystem() : frc::Subsystem("PneumaticsSystem") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    compressor = RobotMap::pneumaticsSystemCompressor;
    solenoid1 = RobotMap::pneumaticsSystemSolenoid1;
    solenoid2 = RobotMap::pneumaticsSystemSolenoid2;
    solenoid3 = RobotMap::pneumaticsSystemSolenoid3;
    solenoid4 = RobotMap::pneumaticsSystemSolenoid4;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //define temporary OI Class
    //OI temp;
}

void PneumaticsSystem::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void PneumaticsSystem::Periodic() {
    // Put code here to be run every loop

}

void PneumaticsSystem::compOn() {
	PneumaticsSystem::compressor->Start();
    }

void PneumaticsSystem::compOff() {
	PneumaticsSystem::compressor->Stop();
    }

void PneumaticsSystem::Solenoid1(){
	PneumaticsSystem::changeSituation(1,Rico1?false:true);
}

void PneumaticsSystem::Solenoid2(){
	PneumaticsSystem::changeSituation(2,Rico2?false:true);
}

void PneumaticsSystem::Solenoid3(){
	PneumaticsSystem::changeSituation(3,Rico3?false:true);
}

void PneumaticsSystem::Solenoid4(){
	PneumaticsSystem::changeSituation(4,Rico4?false:true);
}
// Put methods for controlling this subsystem
// here. Call these from Commands.

bool PneumaticsSystem::changeSituation(int channel, bool sit = out) {
	// default situation out
	switch(channel)
	{
	case 1:
		PneumaticsSystem::solenoid1->Set(sit);
		Rico1 = sit;
		break;

	case 2:
		PneumaticsSystem::solenoid2->Set(sit);
		Rico2 = sit;
		break;

	case 3:
		PneumaticsSystem::solenoid3->Set(sit);
		Rico3 = sit;
		break;

	case 4:
		PneumaticsSystem::solenoid4->Set(sit);
		Rico4 = sit;
		break;

	default:
		//TMD出了问题谁来负责？？
		break;
	}
	return sit;
}

