// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ctre/Phoenix.h"

#include "DrivingSystem.h"
#include "../RobotMap.h"
#include "../Robot.h"
#include <iostream>
#include "time.h"
#include "../Commands/AutonomousCommand.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DrivingSystem::DrivingSystem() :
		frc::Subsystem("DrivingSystem") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	talonSRX1 = RobotMap::drivingSystemTalonSRX1;
	victorSPX1 = RobotMap::drivingSystemVictorSPX1;
	victorSPX2 = RobotMap::drivingSystemVictorSPX2;
	speedControllerGroup1 = RobotMap::drivingSystemSpeedControllerGroup1;
	talonSRX2 = RobotMap::drivingSystemTalonSRX2;
	victorSPX3 = RobotMap::drivingSystemVictorSPX3;
	victorSPX4 = RobotMap::drivingSystemVictorSPX4;
	speedControllerGroup2 = RobotMap::drivingSystemSpeedControllerGroup2;
	robotDrive21 = RobotMap::drivingSystemRobotDrive21;

	talonSRX1->SelectProfileSlot(0, 0);
//	talonSRX1->Config_kD(0, 0.3, 50);
//	talonSRX1->Config_kP(0, 0.3, 50);
//	talonSRX1->Config_kI(0, 0.3, 50);
//	talonSRX1->Config_kF(0, 0.3, 50);
//	talonSRX1 ->ConfigPeakOutputForward(1,50);
//	talonSRX1 -> ConfigPeakOutputReverse(-1,50);

	talonSRX1 ->SetSensorPhase(false);

	talonSRX1 ->SetSelectedSensorPosition(0,0,50);

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void DrivingSystem::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	// SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void DrivingSystem::Periodic() {
	// Put code here to be run every loop
	frc::XboxController Xbox1(0);
	DrivingSystem::robotDrive21->ArcadeDrive(
			-1 * Xbox1.GetY(frc::GenericHID::JoystickHand::kLeftHand),
			Xbox1.GetX(frc::GenericHID::JoystickHand::kLeftHand));
}

void DrivingSystem::Auto() {
	int StartPosition1 = talonSRX1->GetSelectedSensorPosition(0);
	int StartPosition2 = talonSRX2->GetSelectedSensorPosition(0);
	while(true){
		DrivingSystem::talonSRX1->Set(0.5);
		DrivingSystem::victorSPX1->Follow(*DrivingSystem::talonSRX1);
		DrivingSystem::victorSPX2->Follow(*DrivingSystem::talonSRX1);
		DrivingSystem::talonSRX2->Set(-0.5);
		DrivingSystem::victorSPX3->Follow(*DrivingSystem::talonSRX1);
		DrivingSystem::victorSPX4->Follow(*DrivingSystem::talonSRX1);
		if(talonSRX1->GetSelectedSensorPosition(0) - StartPosition1 >= 4096 * 15.32 / (3.94 * 2.54 * 3.14) * 200
				&& talonSRX2->GetSelectedSensorPosition(0) - StartPosition2 >= 4096 * 15.32 / (3.94 * 2.54 * 3.14) * 200){
			break;
		}
	}
	Wait(10);


//	for(int i=0;i<=500;i++){
//		DrivingSystem::talonSRX1->Set(0.5);
//		Wait(0.01);
//	}
//	Wait(5);
//	for(int i=0;i<=500;i++){
//		DrivingSystem::victorSPX1->Set(0.5);
//		Wait(0.01);
//	}
//	Wait(5);
//	for(int i=0;i<=500;i++){
//		DrivingSystem::victorSPX2->Set(0.5);
//		Wait(0.01);
//	}
//	Wait(5);
//	for(int i=0;i<=500;i++){
//		DrivingSystem::talonSRX2->Set(0.5);
//		Wait(0.01);
//	}
//	Wait(5);
//	for(int i=0;i<=500;i++){
//		DrivingSystem::victorSPX3->Set(0.5);
//		Wait(0.01);
//	}
//	Wait(5);
//	for(int i=0;i<=500;i++){
//		DrivingSystem::victorSPX4->Set(0.5);
//		Wait(0.01);
//	}
//	Wait(5);
	//Use Arcade Drive
//	DrivingSystem::robotDrive21->ArcadeDrive(-1,0);

}
// Put methods for controlling this subsystem
// here. Call these from Commands.


