

/*
 * AutonomousSystem.h
 *
 *  Created on: 2018Äê7ÔÂ7ÈÕ
 *      Author: CF-PC
 */

#ifndef SRC_SUBSYSTEMS_AUTONOMOUSSYSTEM_H_
#define SRC_SUBSYSTEMS_AUTONOMOUSSYSTEM_H_
#include "Commands/Subsystem.h"
#include "WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class AutonomousSystem: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<WPI_TalonSRX> talonSRX1;
	std::shared_ptr<WPI_VictorSPX> victorSPX1;

	std::shared_ptr<WPI_VictorSPX> victorSP1;

	std::shared_ptr<frc::SpeedControllerGroup> speedControllerGroup1;
	std::shared_ptr<WPI_TalonSRX> talonSRX2;
	std::shared_ptr<WPI_VictorSPX> victorSPX3;

	std::shared_ptr<WPI_VictorSPX> victorSP2;

	std::shared_ptr<frc::SpeedControllerGroup> speedControllerGroup2;
	std::shared_ptr<frc::RobotDrive> robotDrive21;

	std::shared_ptr<WPI_TalonSRX> talonSRX3;
	std::shared_ptr<frc::SpeedController> spark1;
	std::shared_ptr<WPI_VictorSPX> victorSPX5;
	std::shared_ptr<WPI_VictorSPX> victorSPX6;

	std::shared_ptr<frc::SpeedController> spark2;


	std::shared_ptr<frc::Compressor> compressor;
	std::shared_ptr<frc::Solenoid> solenoid1;
	std::shared_ptr<frc::DoubleSolenoid> solenoid2;
	std::shared_ptr<frc::Solenoid> solenoid3;
	std::shared_ptr<frc::Solenoid> solenoid4;


	std::shared_ptr<frc::ADXRS450_Gyro> Gyro1;

	int dfs1;
	int dfs2;
	float angle;

	double trsDis(double);


	const int DIS_DIRECT_TO_SCALE = 730;
	const int DIS_TRUN_TO_SCALE  = 548;

	const int DIS_SWITCH = 356;
	const int DIS_AUTO_LINE = 305;

	const int DIS_CROSS = 420;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public:
	AutonomousSystem();
	void InitDefaultCommand() override;
	void Periodic() override;

	void AutoL();
	void AutoR();
	void Auto();
	void AutoHandB();
	void AutoTestSwitch1();
	void GryoExample();
	void testLiftAuto();


	void driveMiddle();
	void forwardIn();

	void AutoTestLeftSwitchFromMidPosition();

	void AutoTestLeftScaleGFromLeftPosition();
	void AutoTestRightScaleGFromRightPosition();
	void AutoTestLeftScaleGFromRightPosition();

	void intakeLift();
//
//	void setRun(double);
//	void setRun(double, bool);
	void setRunDfsMode(double, bool);

	void setTurn(double);
	void setTurn(double, bool);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	void switch2caseLeft();
	void switch2caseRight();

	void switchLeft();
	void switchRight();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
};





#endif /* SRC_SUBSYSTEMS_AUTONOMOUSSYSTEM_H_ */
