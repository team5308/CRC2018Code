/*
 * AutonomousSystem.cpp
 *
 *  Created on: 2018年7月7日
 *      Author: CF-PC
 */


#include "ctre/Phoenix.h"

#include "AutonomousSystem.h"
#include "../RobotMap.h"
#include "../Robot.h"
#include <iostream>
#include "time.h"
#include "SmartDashboard/SendableChooser.h"
#include "SmartDashboard/SmartDashboard.h"
using namespace std;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

AutonomousSystem::AutonomousSystem() :
		frc::Subsystem("left position Scale") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	talonSRX1 = RobotMap::drivingSystemTalonSRX1;
	victorSPX1 = RobotMap::drivingSystemVictorSPX1;

	victorSP1 = RobotMap::drivingSystemVictorSPX2;

	speedControllerGroup1 = RobotMap::drivingSystemSpeedControllerGroup1;
	talonSRX2 = RobotMap::drivingSystemTalonSRX2;
	victorSPX3 = RobotMap::drivingSystemVictorSPX3;

	victorSP2 = RobotMap::drivingSystemVictorSPX4;

	speedControllerGroup2 = RobotMap::drivingSystemSpeedControllerGroup2;
	robotDrive21 = RobotMap::drivingSystemRobotDrive21;

    talonSRX3 = RobotMap::hangingSystemTalonSRX1;
    spark1 = RobotMap::hangingSystemSpark1;
    victorSPX5 = RobotMap::hangingSystemVictorSPX1;
    victorSPX6 = RobotMap::hangingSystemVictorSPX2;

    spark2 = RobotMap::intakeSystemSpark2;

    compressor = RobotMap::pneumaticsSystemCompressor;
    solenoid1 = RobotMap::pneumaticsSystemSolenoid1;
    solenoid2 = RobotMap::pneumaticsSystemSolenoid2;
    solenoid3 = RobotMap::pneumaticsSystemSolenoid3;
    solenoid4 = RobotMap::pneumaticsSystemSolenoid4;

    Gyro1 = RobotMap::Gyro1;

//    talonSRX2->SetInverted(true);

	talonSRX1->Config_kD(0, 0, 50);
	talonSRX1->Config_kP(0, 1.0, 50);
	talonSRX1->Config_kI(0, 0, 50);
	talonSRX1->Config_kF(0, 0.035634666295, 50);
	talonSRX1 ->ConfigPeakOutputForward(1,50);
	talonSRX1 -> ConfigPeakOutputReverse(-1,50);

	talonSRX2->Config_kD(0, 0, 50);
	talonSRX2->Config_kP(0, 1.0, 50);
	talonSRX2->Config_kI(0, 0, 50);
	talonSRX2->Config_kF(0, 0.035634666295, 50);
	talonSRX2 ->ConfigPeakOutputForward(1,50);
	talonSRX2 -> ConfigPeakOutputReverse(-1,50);

	talonSRX1->SetSelectedSensorPosition(0,0,50);
	talonSRX2->SetSelectedSensorPosition(0,0,50);

	dfs1 = 0;
	dfs2 = 0;
	angle = 0;

	Gyro1->Reset();
	Gyro1->Calibrate();

	frc::SmartDashboard::PutNumber("right Auto", dfs1);
	frc::SmartDashboard::PutNumber("left Auto", dfs2);

	frc::SmartDashboard::PutNumber("ACC", angle);
}

//计算齿轮需要转多少以直线行走cm厘米 // fast
double AutonomousSystem::trsDis(double cm) {
	double r  = 4096 * 15.32 / (3.94 * 2.54 * 3.14) * cm;
	return (r>0?r:-r);
}

void AutonomousSystem::InitDefaultCommand() {

}

void AutonomousSystem::Periodic() {

}

//直线的自动
//void AutonomousSystem::setRun(double cm)
//{
//	AutonomousSystem::setRun(cm, false);
//}
//
//void AutonomousSystem::setRun(double cm, bool fast){
//
//	double targetDis = trsDis(cm);
//	targetDis = 100000;
//	int StartPosition1 = talonSRX1->GetSelectedSensorPosition(0);
//	int StartPosition2 = talonSRX2->GetSelectedSensorPosition(0);
//	while(true){
////		AutonomousSystem::talonSRX1->Set(ControlMode::MotionMagic, targetDis);  // right
////		AutonomousSystem::victorSPX1->Follow(*AutonomousSystem::talonSRX1);
//
////		AutonomousSystem::talonSRX2->Follow(*AutonomousSystem::talonSRX1);  //left
////		AutonomousSystem::victorSPX3->Follow(*AutonomousSystem::talonSRX1);
//
//		AutonomousSystem::talonSRX2->Set(ControlMode::MotionMagic, targetDis);
//
//		AutonomousSystem::talonSRX1->Set(ControlMode::MotionMagic, targetDis);
//
//
//		AutonomousSystem::victorSPX3->Follow(*AutonomousSystem::talonSRX2);
//
//		AutonomousSystem::victorSPX1->Follow(*AutonomousSystem::talonSRX1);
//
//
//
//
////		if(dfs1 - dfs2 >=1000)
////		{
////			AutonomousSystem::talonSRX1->Set(0.45);  // right
////			AutonomousSystem::victorSPX1->Follow(*AutonomousSystem::talonSRX1);
////			AutonomousSystem::talonSRX2->Set(-0.50);  //left
////			AutonomousSystem::victorSPX3->Follow(*AutonomousSystem::talonSRX2);
////		}
////		else if(dfs2 - dfs1 >= 1000)
////		{
////			AutonomousSystem::talonSRX1->Set(0.50);  // right
////			AutonomousSystem::victorSPX1->Follow(*AutonomousSystem::talonSRX1);
////			AutonomousSystem::talonSRX2->Set(-0.45);  //left
////			AutonomousSystem::victorSPX3->Follow(*AutonomousSystem::talonSRX2);
////		}
////		else
////		{
////			AutonomousSystem::talonSRX1->Set(0.50);  // right
////			AutonomousSystem::victorSPX1->Follow(*AutonomousSystem::talonSRX1);
////			AutonomousSystem::talonSRX2->Set(-0.50);  //left
////			AutonomousSystem::victorSPX3->Follow(*AutonomousSystem::talonSRX2);
////		}
//
//		dfs1 = talonSRX1->GetSelectedSensorPosition(0) - StartPosition1;
//		dfs2 = talonSRX2->GetSelectedSensorPosition(0) - StartPosition2;
//		frc::SmartDashboard::PutNumber("right Auto", dfs1);
//		frc::SmartDashboard::PutNumber("left Auto", dfs2);
//		if(dfs1 < 0)	dfs1 = dfs1 * -1;
//		if(dfs2 < 0)	dfs2 = dfs2 * -1;
//
//		printf("forward!\n");
//
//		if( dfs1 >= targetDis ||
//			dfs2 >= targetDis ){
//				AutonomousSystem::talonSRX1->Set(0);
//				AutonomousSystem::victorSPX1->Follow(*AutonomousSystem::talonSRX1);
//				AutonomousSystem::talonSRX2->Set(0);
//				AutonomousSystem::victorSPX3->Follow(*AutonomousSystem::talonSRX2);
//				printf("left:%d  right:%d",dfs1,dfs2);
//			break;
//		}
//	}

//	while(true)
////	{
////		dfs1 = talonSRX1->GetSelectedSensorPosition(0) - StartPosition1;
////		dfs2 = talonSRX2->GetSelectedSensorPosition(0) - StartPosition2;
////		frc::SmartDashboard::PutNumber("right Auto", dfs1);
////		frc::SmartDashboard::PutNumber("left Auto", dfs2);
////		printf("Hello, Rico!\n");
////		Wait(0.2);
////	}
//	return ;
//}

void AutonomousSystem::setRunDfsMode(double cm, bool isSlow)
{
	double targetDis = trsDis(cm/3);
	double srx1FrontNormal = (1 -(isSlow?0.7:0) )* (cm<0?-1:1);
	double srx2FrontNormal = (1 -(isSlow?0.7:0) )* (cm<0?-1:1) * -1;
	double srx1FrontModify = (0.9 -(isSlow?0.7:0) )* (cm<0?-1:1);
	double srx2FrontModify = (0.9 -(isSlow?0.7:0) )* (cm<0?-1:1) * -1;

	//changesetrun

	int StartPosition1 = talonSRX1->GetSelectedSensorPosition(0);
	int StartPosition2 = talonSRX2->GetSelectedSensorPosition(0);
	while(true){

		dfs1 = talonSRX1->GetSelectedSensorPosition(0)  - StartPosition1;
		dfs2 = talonSRX2->GetSelectedSensorPosition(0)  - StartPosition2;
		if(dfs1 < 0) dfs1 *=-1;
		if(dfs2 < 0) dfs2 *=-1;
		frc::SmartDashboard::PutNumber("right Auto", dfs1);
		frc::SmartDashboard::PutNumber("left Auto", dfs2);

		AutonomousSystem::talonSRX1->Set(srx1FrontNormal);  // right
		AutonomousSystem::victorSPX1->Follow(*AutonomousSystem::talonSRX1);
		AutonomousSystem::talonSRX2->Set(srx2FrontNormal);  //left
		AutonomousSystem::victorSPX3->Follow(*AutonomousSystem::talonSRX2);

//		if(dfs1 - dfs2 >=1000)
//		{
//			AutonomousSystem::talonSRX1->Set(srx1FrontModify);  // right
//			AutonomousSystem::victorSPX1->Follow(*AutonomousSystem::talonSRX1);
//			AutonomousSystem::talonSRX2->Set(srx2FrontNormal);  //left
//			AutonomousSystem::victorSPX3->Follow(*AutonomousSystem::talonSRX2);
//		}
//		else if(dfs2 - dfs1 >= 1000)
//		{
//			AutonomousSystem::talonSRX1->Set(srx1FrontNormal);  // right
//			AutonomousSystem::victorSPX1->Follow(*AutonomousSystem::talonSRX1);
//			AutonomousSystem::talonSRX2->Set(srx2FrontModify);  //left
//			AutonomousSystem::victorSPX3->Follow(*AutonomousSystem::talonSRX2);
//		}
//		else
//		{
//			AutonomousSystem::talonSRX1->Set(srx1FrontNormal);  // right
//			AutonomousSystem::victorSPX1->Follow(*AutonomousSystem::talonSRX1);
//			AutonomousSystem::talonSRX2->Set(srx2FrontNormal);  //left
//			AutonomousSystem::victorSPX3->Follow(*AutonomousSystem::talonSRX2);
//		}


		if( dfs1 >= targetDis ||
			dfs2 >= targetDis ){
				AutonomousSystem::talonSRX1->Set(0);
				AutonomousSystem::victorSPX1->Follow(*AutonomousSystem::talonSRX1);
				AutonomousSystem::talonSRX2->Set(0);
				AutonomousSystem::victorSPX3->Follow(*AutonomousSystem::talonSRX2);
				printf("left:%d  right:%d",dfs1,dfs2);
			break;
		}
	}
	printf("-------setRunDfsMode (%d) end\n", cm);
}

/* set degree
 *  default: turn right
 *  motor:  (0, +) right (0, -1) left
 *  right -- positive
 */
void AutonomousSystem::setTurn(double degree)
{
	double curAngle = AutonomousSystem::Gyro1->GetAngle();;
	if(degree > 0)
	{
		while(angle < (degree * 0.95)) //right positive
		{
			angle = AutonomousSystem::Gyro1->GetAngle()-curAngle;
			frc::SmartDashboard::PutNumber("ACC", angle);
			printf("%.4f..target:%.4f\n", angle, degree);
			AutonomousSystem::robotDrive21 ->ArcadeDrive(0.0, 0.6);  // (0, +) right (0, -1) left
		}
	}
	else
	{
		while(angle > (degree * 0.95)) //right positive
		{
			angle = AutonomousSystem::Gyro1->GetAngle()-curAngle;
			frc::SmartDashboard::PutNumber("ACC", angle);
			printf("%.4f..target:%.4f\n", angle, degree);
			AutonomousSystem::robotDrive21 ->ArcadeDrive(0.0, -0.6);  // (0, +) right (0, -1) left
		}
	}
	printf("---------end turn\n");

	Wait(2.0);
	angle = AutonomousSystem::Gyro1->GetAngle()-curAngle;
	printf("%.4f..target:%.4f\n", angle, degree);
	return ;
}

void AutonomousSystem::setTurn(double degree, bool isRight)
{
	int temp = (isRight?1:-1);
	AutonomousSystem::setTurn(degree * temp);
	return ;
}


void AutonomousSystem::AutoHandB()
{
//	angle = Gyro1->GetAngle();
	while(true)
	{
		AutonomousSystem::robotDrive21->Drive(0.25,0.25);
//		angle = Gyro1->GetAngle() - an1;
		printf("%.4f\n", angle);

		if(angle >=0.5){   //not define the measurement of 0.5(value)
			break;
		}
	}

	Wait(2);


}

void AutonomousSystem::AutoTestSwitch1()
{
	AutonomousSystem::setRunDfsMode(50, true);
	AutonomousSystem::setTurn(-90);
	Wait(0.5);
	AutonomousSystem::setRunDfsMode(220, true);

	AutonomousSystem::setTurn(90);
	Wait(0.5);
	AutonomousSystem::setRunDfsMode(320, true);
	Wait(0.5);
	AutonomousSystem::spark2->Set(-0.5);
	Wait(0.2);
	AutonomousSystem::spark2->Set(0.1);
	AutonomousSystem::solenoid1->Set(true);
	Wait(0.5);
	AutonomousSystem::spark2->Set(0.5);
	Wait(0.2);
	AutonomousSystem::solenoid1->Set(false);
	Wait(0.3);
	AutonomousSystem::spark2->Set(0);
	Wait(1);
	AutonomousSystem::spark2->Set(0);
	return ;
}

void AutonomousSystem::AutoL(){
		AutonomousSystem::setRunDfsMode(50, true);
		AutonomousSystem::setTurn(90);
		Wait(0.5);
		AutonomousSystem::setRunDfsMode(150, true);

		AutonomousSystem::setTurn(-90);
		Wait(0.5);
		AutonomousSystem::setRunDfsMode(320, true);
		Wait(0.5);
		AutonomousSystem::spark2->Set(-0.5);
		Wait(0.2);
		AutonomousSystem::spark2->Set(0.1);
		AutonomousSystem::solenoid1->Set(true);
		Wait(0.5);
		AutonomousSystem::spark2->Set(0.5);
		Wait(0.2);
		AutonomousSystem::solenoid1->Set(false);
		Wait(0.3);
		AutonomousSystem::spark2->Set(-0.5);
		Wait(1);
		AutonomousSystem::spark2->Set(0);
		return ;
}

void AutonomousSystem::AutoR() {


//	AutonomousSystem::setRun(200, true);

	cout<<"zhuan";
	return ;
}

void AutonomousSystem::GryoExample()
{

//	AutonomousSystem::Gyro1->Calibrate()
	AutonomousSystem::Gyro1->Reset();
	AutonomousSystem::Gyro1->Calibrate();
//	AutonomousSystem::setRun(20);
	while(angle < 45) //right positive
	{
		angle = AutonomousSystem::Gyro1->GetAngle();
		frc::SmartDashboard::PutNumber("ACC", angle);
		printf("%.4f\n", angle);
		AutonomousSystem::robotDrive21 ->ArcadeDrive(0, 0.5);  // (0, +) right (0, -1) left
	}
	Wait(2);
}

void AutonomousSystem::AutoTestLeftScaleGFromLeftPosition()
{
	AutonomousSystem::setRunDfsMode(700,false);
	Wait(0.2);
	AutonomousSystem::setTurn(45);

	AutonomousSystem::solenoid3->Set(true);

	AutonomousSystem::talonSRX3->Set(-0.7);  // negetive --> down
	AutonomousSystem::spark1->Set(-0.7);
	AutonomousSystem::victorSPX5->Set(-0.7);
	AutonomousSystem::victorSPX6->Set(-0.7);
	AutonomousSystem::setRunDfsMode(10, true);

	Wait(1);

	AutonomousSystem::talonSRX3->Set(-0.05);  // negetive --> down
	AutonomousSystem::spark1->Set(-0.05);
	AutonomousSystem::victorSPX5->Set(-0.05);
	AutonomousSystem::victorSPX6->Set(-0.05);

	AutonomousSystem::spark2->Set(-0.5);
	Wait(0.5);
	AutonomousSystem::solenoid1->Set(true);
	Wait(0.5);
	AutonomousSystem::solenoid1->Set(false);
	Wait(0.5);
	AutonomousSystem::spark2->Set(0.2);


	AutonomousSystem::setRunDfsMode(-10, true);

	AutonomousSystem::talonSRX3->Set(0.5);
	AutonomousSystem::spark1->Set(0.5);
	AutonomousSystem::victorSPX5->Set(0.5);
	AutonomousSystem::victorSPX6->Set(0.5);

	Wait(1);

	AutonomousSystem::talonSRX3->Set(0);
	AutonomousSystem::spark1->Set(0);
	AutonomousSystem::victorSPX5->Set(0);
	AutonomousSystem::victorSPX6->Set(0);

}

void AutonomousSystem::AutoTestRightScaleGFromRightPosition()
{
		AutonomousSystem::setRunDfsMode(900,false);  // 700 -- middle
		Wait(0.2);
		AutonomousSystem::setTurn(-45);

		AutonomousSystem::solenoid3->Set(true);



		AutonomousSystem::talonSRX3->Set(-0.35);  // negetive --> down
		AutonomousSystem::spark1->Set(-0.35);
		AutonomousSystem::victorSPX5->Set(-0.35);
		AutonomousSystem::victorSPX6->Set(-0.35);

		Wait(3);

		AutonomousSystem::setRunDfsMode(25, true);
		AutonomousSystem::talonSRX3->Set(-0.05);  // negetive --> down
		AutonomousSystem::spark1->Set(-0.05);
		AutonomousSystem::victorSPX5->Set(-0.05);
		AutonomousSystem::victorSPX6->Set(-0.05);

//		AutonomousSystem::spark2->Set(-0.5);
//		Wait(0.5);
//		AutonomousSystem::solenoid1->Set(true);
//		Wait(0.5);
//		AutonomousSystem::solenoid1->Set(false);
//		Wait(0.5);
//		AutonomousSystem::spark2->Set(0.2);

		AutonomousSystem::spark2->Set(-0.5);
		Wait(0.5);

		AutonomousSystem::spark2->Set(0.1);

		AutonomousSystem::victorSP1->Set(0.7);
		AutonomousSystem::victorSP2->Set(-0.7);

		Wait(1.5);

		AutonomousSystem::victorSP1->Set(0);
		AutonomousSystem::victorSP2->Set(0);

		AutonomousSystem::spark2->Set(0.5);

		Wait(0.4);

		AutonomousSystem::spark2->Set(0);

		AutonomousSystem::setTurn(-120);


		AutonomousSystem::setRunDfsMode(55, true);

		AutonomousSystem::talonSRX3->Set(0.5);
		AutonomousSystem::spark1->Set(0.5);
		AutonomousSystem::victorSPX5->Set(0.5);
		AutonomousSystem::victorSPX6->Set(0.5);

		Wait(3);

		AutonomousSystem::talonSRX3->Set(0);
		AutonomousSystem::spark1->Set(0);
		AutonomousSystem::victorSPX5->Set(0);
		AutonomousSystem::victorSPX6->Set(0);
}


void AutonomousSystem::AutoTestLeftScaleGFromRightPosition()
{
	AutonomousSystem::setRunDfsMode(AutonomousSystem::DIS_TRUN_TO_SCALE, false);
	Wait(0.2);
	AutonomousSystem::setTurn(-90);
	AutonomousSystem::setRunDfsMode(AutonomousSystem::DIS_CROSS, false);
	Wait(0.2);
	AutonomousSystem::setTurn(90);

	AutonomousSystem::talonSRX3->Set(-0.7);  // negetive --> down
	AutonomousSystem::spark1->Set(-0.7);
	AutonomousSystem::victorSPX5->Set(-0.7);
	AutonomousSystem::victorSPX6->Set(-0.7);
	AutonomousSystem::setRunDfsMode(10, false);

	Wait(1);

	AutonomousSystem::talonSRX3->Set(-0.05);
	AutonomousSystem::spark1->Set(-0.05);
	AutonomousSystem::victorSPX5->Set(-0.05);
	AutonomousSystem::victorSPX6->Set(-0.05);

	//replace IN and OUT
	AutonomousSystem::spark2->Set(-0.5);
	Wait(0.5);
	AutonomousSystem::solenoid1->Set(true);
	Wait(0.5);
	AutonomousSystem::solenoid1->Set(false);
	Wait(0.5);
	AutonomousSystem::spark2->Set(0.2);

	AutonomousSystem::setRunDfsMode(-10, true);

	AutonomousSystem::talonSRX3->Set(0.5);
	AutonomousSystem::spark1->Set(0.5);
	AutonomousSystem::victorSPX5->Set(0.5);
	AutonomousSystem::victorSPX6->Set(0.5);

	Wait(1);

	AutonomousSystem::talonSRX3->Set(0);
	AutonomousSystem::spark1->Set(0);
	AutonomousSystem::victorSPX5->Set(0);
	AutonomousSystem::victorSPX6->Set(0);
}

void AutonomousSystem::driveMiddle() // left scale
{
	AutonomousSystem::setRunDfsMode(680, false);
		Wait(0.2);
		AutonomousSystem::setTurn(-75);
		AutonomousSystem::setRunDfsMode(630, false);
		Wait(0.2);
		AutonomousSystem::setTurn(80);

		Wait(0.2);
		AutonomousSystem::setRunDfsMode(30, false);

		AutonomousSystem::solenoid3->Set(true);

				AutonomousSystem::talonSRX3->Set(-0.7);  // negetive --> down
				AutonomousSystem::spark1->Set(-0.7);
				AutonomousSystem::victorSPX5->Set(-0.7);
				AutonomousSystem::victorSPX6->Set(-0.7);

				Wait(2.2);

				AutonomousSystem::setRunDfsMode(15, true);
				AutonomousSystem::talonSRX3->Set(-0.05);  // negetive --> down
				AutonomousSystem::spark1->Set(-0.05);
				AutonomousSystem::victorSPX5->Set(-0.05);
				AutonomousSystem::victorSPX6->Set(-0.05);


				AutonomousSystem::victorSP1->Set(1);
				AutonomousSystem::victorSP2->Set(-1);

				Wait(1.5);

				AutonomousSystem::victorSP1->Set(0);
				AutonomousSystem::victorSP2->Set(0);

				AutonomousSystem::setTurn(-180);

				AutonomousSystem::setRunDfsMode(25, true);

				AutonomousSystem::talonSRX3->Set(0.8);
				AutonomousSystem::spark1->Set(0.8);
				AutonomousSystem::victorSPX5->Set(0.8);
				AutonomousSystem::victorSPX6->Set(0.8);

				Wait(1);

				AutonomousSystem::talonSRX3->Set(0);
				AutonomousSystem::spark1->Set(0);
				AutonomousSystem::victorSPX5->Set(0);
				AutonomousSystem::victorSPX6->Set(0);
}


void AutonomousSystem::forwardIn()
{

	AutonomousSystem::solenoid1->Set(true);

	AutonomousSystem::victorSP1->Set(0.5); // intake wheel in
	AutonomousSystem::victorSP2->Set(-0.5);

	Wait(0.2);

	AutonomousSystem::setRunDfsMode(100, true);

	AutonomousSystem::solenoid1->Set(false);

	Wait(0.5);

	AutonomousSystem::victorSP1->Set(0); // intake wheel stop
	AutonomousSystem::victorSP2->Set(0);

	AutonomousSystem::setRunDfsMode(-50, true);

	AutonomousSystem::talonSRX3->Set(-0.6); //negative -- up
	AutonomousSystem::spark1->Set(-0.6);
	AutonomousSystem::victorSPX5->Set(-0.6);
	AutonomousSystem::victorSPX6->Set(-0.6);

	AutonomousSystem::setRunDfsMode(-15, true);

	AutonomousSystem::talonSRX3->Set(0);
	AutonomousSystem::spark1->Set(0);
	AutonomousSystem::victorSPX5->Set(0);
	AutonomousSystem::victorSPX6->Set(0);

	AutonomousSystem::victorSP1->Set(-0.5); // intake wheel stop
	AutonomousSystem::victorSP2->Set(0.5);

	AutonomousSystem::setRunDfsMode(-40, true);
	Wait(1);

	AutonomousSystem::victorSP1->Set(0); // intake wheel stop
	AutonomousSystem::victorSP2->Set(0);
}

void AutonomousSystem::AutoTestLeftSwitchFromMidPosition()
{
	AutonomousSystem::solenoid1->Set(false);
	AutonomousSystem::solenoid2->Set(DoubleSolenoid::kReverse);
	AutonomousSystem::setRunDfsMode(240, false);

	AutonomousSystem::setTurn(-90);

	AutonomousSystem::setRunDfsMode(240, false);

	AutonomousSystem::setTurn(90);

	AutonomousSystem::setRunDfsMode(35, false);

	AutonomousSystem::talonSRX3->Set(-0.6); //negative -- up
	AutonomousSystem::spark1->Set(-0.6);
	AutonomousSystem::victorSPX5->Set(-0.6);
	AutonomousSystem::victorSPX6->Set(-0.6);

	AutonomousSystem::setRunDfsMode(40, true);

	AutonomousSystem::talonSRX3->Set(0); //stop
	AutonomousSystem::spark1->Set(0);
	AutonomousSystem::victorSPX5->Set(0);
	AutonomousSystem::victorSPX6->Set(0);

	AutonomousSystem::victorSP1->Set(0.5); // intake wheel in
	AutonomousSystem::victorSP2->Set(-0.5);

	Wait(0.4);

	AutonomousSystem::victorSP1->Set(0);
	AutonomousSystem::victorSP2->Set(0);

	AutonomousSystem::setRunDfsMode(-10, true);

	AutonomousSystem::talonSRX3->Set(0.4); //stop
	AutonomousSystem::spark1->Set(0.4);
	AutonomousSystem::victorSPX5->Set(0.4);
	AutonomousSystem::victorSPX6->Set(0.4);

	AutonomousSystem::setTurn(-180);
	AutonomousSystem::setRunDfsMode(20, true);

	AutonomousSystem::talonSRX3->Set(0); //stop
	AutonomousSystem::spark1->Set(0);
	AutonomousSystem::victorSPX5->Set(0);
	AutonomousSystem::victorSPX6->Set(0);
}

//
//void AutonomousSystem::noCubeMiddle()
//{
//	AutonomousSystem::setRunDfsMode(750, false);
//		Wait(0.2);
//		AutonomousSystem:setTurn(-75);
//		AutonomousSystem::setRunDfsMode(340, false);
//		Wait(0.2);
//}


void AutonomousSystem::testLiftAuto()
{
	AutonomousSystem::talonSRX3->Set(-0.35);  // negetive --> down
	AutonomousSystem::spark1->Set(-0.35);
	AutonomousSystem::victorSPX5->Set(-0.35);
	AutonomousSystem::victorSPX6->Set(-0.35);

	Wait(3);

	AutonomousSystem::setRunDfsMode(15.0, true);
	AutonomousSystem::talonSRX3->Set(-0.05);  // negetive --> down
	AutonomousSystem::spark1->Set(-0.05);
	AutonomousSystem::victorSPX5->Set(-0.05);
	AutonomousSystem::victorSPX6->Set(-0.05);


	AutonomousSystem::spark2->Set(-0.5);
	Wait(0.5);

	AutonomousSystem::spark2->Set(0.1);

	AutonomousSystem::victorSP1->Set(0.5);
	AutonomousSystem::victorSP2->Set(-0.5);

	Wait(1);

	AutonomousSystem::spark2->Set(0.5);
	Wait(0.5);
	AutonomousSystem::spark2->Set(0);

//	AutonomousSystem::talonSRX3->Set(0.5);
//			AutonomousSystem::spark1->Set(0.5);
//			AutonomousSystem::victorSPX5->Set(0.5);
//			AutonomousSystem::victorSPX6->Set(0.5);
//
//			Wait(3);
//
//			AutonomousSystem::talonSRX3->Set(0);
//			AutonomousSystem::spark1->Set(0);
//			AutonomousSystem::victorSPX5->Set(0);
//			AutonomousSystem::victorSPX6->Set(0);
}

void AutonomousSystem::switch2caseLeft()
{
	AutonomousSystem::switchRight();
	AutonomousSystem::setRunDfsMode(-100, true);
	AutonomousSystem::setTurn(80);
	AutonomousSystem::forwardIn();
	AutonomousSystem::setTurn(-80);
	AutonomousSystem::setRunDfsMode(100, true);
	AutonomousSystem::solenoid1->Set(true);
	AutonomousSystem::setRunDfsMode(-50, true);
}

void AutonomousSystem::switch2caseRight()
{
	AutonomousSystem::switchRight();
	AutonomousSystem::setRunDfsMode(-100, true);
	AutonomousSystem::setTurn(-80);
	AutonomousSystem::forwardIn();
	AutonomousSystem::setTurn(80);
	AutonomousSystem::setRunDfsMode(100, true);
	AutonomousSystem::solenoid1->Set(true);
	AutonomousSystem::setRunDfsMode(-50, true);
}

void AutonomousSystem::switchRight()
{
	AutonomousSystem::setRunDfsMode(50, true);
	AutonomousSystem::setTurn(90);
	Wait(0.5);
	AutonomousSystem::setRunDfsMode(150, true);

	AutonomousSystem::setTurn(-90);
	Wait(0.5);
	AutonomousSystem::setRunDfsMode(320, true);
	Wait(0.5);
	AutonomousSystem::spark2->Set(-0.5);
	Wait(0.2);
	AutonomousSystem::spark2->Set(0.1);
	AutonomousSystem::solenoid1->Set(true);
	Wait(0.5);
	AutonomousSystem::spark2->Set(0.5);
	Wait(0.2);
	AutonomousSystem::solenoid1->Set(false);
	Wait(0.3);
	AutonomousSystem::spark2->Set(-0.5);
	Wait(1);
	AutonomousSystem::spark2->Set(0);
	return ;
}

void AutonomousSystem::switchLeft()
{
	AutonomousSystem::setRunDfsMode(50, true);
		AutonomousSystem::setTurn(-90);
		Wait(0.5);
		AutonomousSystem::setRunDfsMode(220, true);

		AutonomousSystem::setTurn(90);
		Wait(0.5);
		AutonomousSystem::setRunDfsMode(320, true);
		Wait(0.5);
		AutonomousSystem::spark2->Set(-0.5);
		Wait(0.2);
		AutonomousSystem::spark2->Set(0.1);
		AutonomousSystem::solenoid1->Set(true);
		Wait(0.5);
		AutonomousSystem::spark2->Set(0.5);
		Wait(0.2);
		AutonomousSystem::solenoid1->Set(false);
		Wait(0.3);
		AutonomousSystem::spark2->Set(0);
		Wait(1);
		AutonomousSystem::spark2->Set(0);
		return ;
}




