// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ctre/Phoenix.h"
#include <iostream>


#include "HangingSystem.h"
#include "../RobotMap.h"
#include "../Robot.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

HangingSystem::HangingSystem() : frc::Subsystem("HangingSystem") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    quadratureEncoder1 = RobotMap::hangingSystemQuadratureEncoder1;
    talonSRX1 = RobotMap::hangingSystemTalonSRX1;
    pIDController1 = RobotMap::hangingSystemPIDController1;
    spark1 = RobotMap::hangingSystemSpark1;
    victorSPX1 = RobotMap::hangingSystemVictorSPX1;
    victorSPX2 = RobotMap::hangingSystemVictorSPX2;

    dfs = 0;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

//mode 1: limit mode

//!!!这里我也不知道是个啥东西!!!

void HangingSystem::mode1()
{
	frc::Joystick Joystick2(1);

	double YY = Joystick2.GetY(frc::GenericHID::JoystickHand::kRightHand);

	if(YY > 0.125) //down
	{

		HangingSystem::talonSRX1->Set(YY * 0.65);
		HangingSystem::spark1->Set(YY * 0.65);
		HangingSystem::victorSPX1->Set(YY * 0.65);
		HangingSystem::victorSPX2->Set(YY * 0.65);
	}
	else if (YY < -0.125) //up
	{

				HangingSystem::talonSRX1->Set(YY * 0.8);
				HangingSystem::spark1->Set(YY *0.8);
				HangingSystem::victorSPX1->Set(YY * 0.8);
				HangingSystem::victorSPX2->Set(YY * 0.8);


//		HangingSystem::talonSRX1->Set(-1);
//		HangingSystem::spark1->Set(-1);
//		HangingSystem::victorSPX1->Set(-1);
//		HangingSystem::victorSPX2->Set(-1);



	}
	else  // stay
	{
		HangingSystem::talonSRX1->Set(0);
		HangingSystem::spark1->Set(0);
		HangingSystem::victorSPX1->Set(0);
		HangingSystem::victorSPX2->Set(0);
	}


	return ;
}

void HangingSystem::fuckUpMode()
{
	frc::Joystick Joystick2(1);

	double YY = Joystick2.GetY(frc::GenericHID::JoystickHand::kRightHand);

	if(YY > 0.125) //down
	{

		HangingSystem::talonSRX1->Set(1);
		HangingSystem::spark1->Set(1);
		HangingSystem::victorSPX1->Set(1);
		HangingSystem::victorSPX2->Set(1);
	}
	else if (YY < -0.125) //up
	{

//				HangingSystem::talonSRX1->Set(YY * 0.8);
//				HangingSystem::spark1->Set(YY *0.8);
//				HangingSystem::victorSPX1->Set(YY * 0.8);
//				HangingSystem::victorSPX2->Set(YY * 0.8);


		HangingSystem::talonSRX1->Set(-1);
		HangingSystem::spark1->Set(-1);
		HangingSystem::victorSPX1->Set(-1);
		HangingSystem::victorSPX2->Set(-1);



	}
	else  // stay
	{
		HangingSystem::talonSRX1->Set(0);
		HangingSystem::spark1->Set(0);
		HangingSystem::victorSPX1->Set(0);
		HangingSystem::victorSPX2->Set(0);
	}


	return ;
}

void HangingSystem::modeorg()
{
	frc::Joystick Joystick2(1);

	double YY = Joystick2.GetY(frc::GenericHID::JoystickHand::kRightHand);

	if( YY >= 0.125 || YY <= -0.125)
	{
		HangingSystem::talonSRX1->Set(0.5*YY);
		HangingSystem::spark1->Set(0.5*YY);
		HangingSystem::victorSPX1->Set(0.5*YY);
		HangingSystem::victorSPX2->Set(0.5*YY);
	}
	else
	{
		HangingSystem::talonSRX1->Set(0);
		HangingSystem::spark1->Set(0);
		HangingSystem::victorSPX1->Set(0);
		HangingSystem::victorSPX2->Set(0);
	}
	std::cout<<YY<<std::endl;
}

void HangingSystem::modePID()
{
	int StartPosition1 = talonSRX1->GetSelectedSensorPosition(0);


		frc::Joystick Joystick2(1);

		double YY = Joystick2.GetY(frc::GenericHID::JoystickHand::kRightHand);

		while(YY > 0.1 || YY < -0.1){
			dfs = talonSRX1->GetSelectedSensorPosition(0) - StartPosition1;
			if(dfs < 0) dfs = -1 * dfs;
			HangingSystem::talonSRX1->Set(-0.5 * Joystick2.GetY(frc::GenericHID::JoystickHand::kRightHand));
			HangingSystem::spark1->Set(-0.5 * Joystick2.GetY(frc::GenericHID::JoystickHand::kRightHand));
			HangingSystem::victorSPX1->Set(-0.5 * Joystick2.GetY(frc::GenericHID::JoystickHand::kRightHand));
			HangingSystem::victorSPX2->Set(-0.5 * Joystick2.GetY(frc::GenericHID::JoystickHand::kRightHand));

			if(dfs >= 4096 * 10.7){
				break;
			}
			if(dfs < 1000){
				break;
			}
		}

	//	if( YY >0.1 || YY < -0.1){
	//		if(YY>=0.6 || YY<=-0.6)
	//		{
	//			HangingSystem::talonSRX1->Set(YY>0?0.1:-0.1);
	//			HangingSystem::spark1->Set(YY>0?0.1:-0.1);
	//			HangingSystem::victorSPX1->Set(YY>0?0.1:-0.1);
	//			HangingSystem::victorSPX2->Set(YY>0?0.1:-0.1);
	//			std::cout<<"CFNB\n";
	//		}
	//		else
	//		{
	//			HangingSystem::talonSRX1->Set(-0.5 * Joystick2.GetY(frc::GenericHID::JoystickHand::kRightHand));
	//			HangingSystem::spark1->Set(-0.5 * Joystick2.GetY(frc::GenericHID::JoystickHand::kRightHand));
	//			HangingSystem::victorSPX1->Set(-0.5 * Joystick2.GetY(frc::GenericHID::JoystickHand::kRightHand));
	//			HangingSystem::victorSPX2->Set(-0.5 * Joystick2.GetY(frc::GenericHID::JoystickHand::kRightHand));
	//		}
	//	}
	//	}

		HangingSystem::talonSRX1->Set(0);
		HangingSystem::spark1->Set(0);
		HangingSystem::victorSPX1->Set(0);
		HangingSystem::victorSPX2->Set(0);

		std::cout<<YY<<std::endl;
}

void HangingSystem::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


void HangingSystem::Periodic() {
    // Put code here to be run every loop
	HangingSystem::mode1();

}

void HangingSystem::Auto(){
}
//void HangingSystem::Auto(){
//	HangingSystem::talonSRX1->Set(ControlMode::Position,4096)
//}
// Put methods for controlling this subsystem
// here. Call these from Commands.

